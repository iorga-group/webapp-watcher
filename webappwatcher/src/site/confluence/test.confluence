
h1. Intallation

Pour surveiller une application web :
# Mettre {{webwatcher\-\*.jar}} dans le {{WEB-INF/lib/}} ;
# Ajouter également dans le {{WEB-INF/lib}} les dépendances (jar) présentes dans le paquet de distribution, dans le dossier {{lib/}} (attention de ne pas ajouter des jars qui seraient déjà présents dans d'autres versions) ;
# Ajouter également dans le {{WEB-INF/lib}} les dépendances (jar) présentes dans le dossier {{optional-jar}} ({{log4j}}* et {{slf4j}}*) si le serveur d'appli ne fournit pas ces jar ;
# Rajouter cette configuration dans le {{WEB-INF/web.xml}} (juste après le filtre permettant de mettre le "Principal" — l'utilisateur connecté — dans la {{HttpServletRequest}}, c'est à dire, après le filtre de Seam par exemple) :

{code}
	<filter>
		<filter-name>Log Filter</filter-name>
		<filter-class>com.iorga.webappwatcher.RequestLogFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>Log Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
{code}

Avec JBoss 7, ajouter {{"com/sun/management"}} à {{jboss-as-7/modules/sun/jdk/main/modules.xml}} :
{code}
    ...
    <module xmlns="urn:jboss:module:1.1" name="sun.jdk">
        <resources>
            <!-- currently jboss modules has not way of importing services from
            classes.jar so we duplicate them here -->
            <resource-root path="service-loader-resources"/>
        </resources>
        <dependencies>
            <system export="true">
                <paths>
                    <path name="com/sun/management"/>
                    <path name="com/sun/script/javascript"/>
    ...
{code}

h1. Configuration

Voici l'ensemble des configurations du Log Filter :

|| Nom du paramètre || Description || Défaut ||
| {{requestNameIncludes}} | Suite de regexp (séparées par des virgules) pour inclure des requêtes (en se basant sur leur {{requestURI}}). | {{.*\\.xhtml}} |
| {{requestNameExcludes}} | Suite de regexp (séparées par des virgules) pour exclure des requêtes (en se basant sur leur {{requestURI}}). Dans l'ordre, {{requestNameIncludes}} est testé afin de savoir si la requête est incluse, puis {{requestNameExcludes}} est testé si elle a passé le premier filtre | vide |
| {{cmdRequestName}} | Nom de la commande permettant de requêter le filtre. | {{RequestLogFilterCmd}} |
| {{waitForEventLogToCompleteMillis}} | Nombre de millisecondes que le thread d'écriture du log va attendre un évènement qui n'est pas encore complété. Au delà de cette attente, il est logué avec {{completed = false}} | 5 \* 60 \* 1000 (=5mn) |
| {{logPath}} | Chemin d'écriture du fichier de log (sans l'extension). | {{webappwatcherlog}} |
| {{eventLogRetentionMillis}} | Durée de rétention des évènements non encore logués. Quand une demande d'écriture est faite, les logs de toute cette durée sont écris. | 5 \* 60 \* 1000 (=5mn) |
| {{eventLogWatchers}} | Liste de nom de classes (séparées par des virgules) de "Watchers", déclencheurs d'écriture du log. Voici les différentes possibilités :
* {{com.iorga.webappwatcher.watcher.CpuCriticalUsageWatcher}} : Observe les pics de CPU, et log après un seuil à configurer (criticalCpuUsage, deadLockThreadsSearchDeltaMillis). Activé par défaut.
* {{com.iorga.webappwatcher.watcher.WriteAllRequestsWatcher}} : Observe les évènements qui vont être supprimés (car non écrits, et depuis trop longtemps dans la file d'évènements en attente) et demande une écriture des évènements de type "Requête". Activé par défaut.
* {{com.iorga.webappwatcher.watcher.RequestDurationWatcher}} : Observe les requêtes trop longues (ou qui dépassent la taille d'attente du log de rétention — {{waitForEventLogToCompleteMillis}} —) et demande une écriture de tous les évènements en cas de dépassement. Utilise le paramètres requestDurationLimits. Activé par défaut. | {{com.iorga.webappwatcher.watcher.CpuCriticalUsageWatcher,com.iorga.webappwatcher.watcher.WriteAllRequestsWatcher,com.iorga.webappwatcher.watcher.RequestDurationWatcher}} |
| {{criticalCpuUsage}} | Seuil d'utilisation CPU (en %, float) au delà duquel vont être logués toute la queue d'évènements. Nécessite l'activation du watcher {{com.iorga.webappwatcher.watcher.CpuCriticalUsageWatcher}}. | 1,5 CPU (donc 100 / nb\_CPU \* 1,5) |
| {{deadLockThreadsSearchDeltaMillis}} | Nombre de milliseconde à attendre avant de tenter une nouvelle détection de DeadLockThread. Nécessite l'activation du watcher {{com.iorga.webappwatcher.watcher.CpuCriticalUsageWatcher}}. | 5 \* 60 \* 1000 (=5mn) |
| {{cpuComputationDeltaMillis}} | Nombre de milliseconde à attendre avant d'enregistrer un nouveau log de type "SystemEventLog" (c'est à dire les traces CPU / mémoire etc...). | {{300}} |
| {{threadNameIncludes}} | Suite de regexp (séparées par des virgules) pour inclure des stack de Threads en cours (en se basant sur le nom du Thread). | {{http.*}} |
| {{threadNameExcludes}} | Suite de regexp (séparées par des virgules) pour exclure des stack de Threads en cours (en se basant sur le nom du Thread). Dans l'ordre, {{threadNameIncludes}} est testé afin de savoir si le thread va être logué, puis {{threadNameExcludes}} est testé si il a passé le premier filtre. | vide |
| {{requestDurationLimits}} | Suite de regexp (séparées par des virgules) associant une requête avec un temps limite (en millisecondes) au dela duquel une demande d'écriture complète des logs sera faite (nécessite l'activation du {{RequestDurationWatcher}}). Pour chaque regexp, préciser le temps après un "{{:}}", par exemple : "{{.*/login\\.xhtml:60000}}" pour loguer quand l'appel à la page "{{login.xhtml}}" dépasse 60 secondes. | {{.*\\.xhtml:30000}} |

Ces configurations doivent être déclarées de cette manière :
{code}
	<filter>
		<filter-name>Log Filter</filter-name>
		<filter-class>com.iorga.webappwatcher.RequestLogFilter</filter-class>
		<init-param>
			<param-name>requestNameIncludes</param-name>
			<param-value>.*\.xhtml</param-value>
		</init-param>
	</filter>
{code}

h1. Commande en direct du "Log Filter"
Le Log Filter peut être commandé. Voici les commandes :
* stopAll : Arrêt du système de logging d'évènement (tous ses services)
* startAll : Démarrage du système de logging d'évènement (tous ses services)
* writeRetentionLog :  Demande d'écriture des logs
* closeRetentionLog : Demande la bonne fermeture du fichier de log (un autre sera créé dès le prochain besoin d'écrire dedans)
* downloadEventLog : Téléchargement du fichier de log
* printParameters : Affichage des paramètres et de leur valeurs
* printInfos : Affichage d'infos diverses (taille du log actuelle sur le disque par exemple)
* changeParameters : Changement de paramètres du Log Filter. Chaque paramètre http associé à sa valeur est l'un des paramètres précédemment décrit.
* printHtmlCommands : Affichage de toutes ces commandes en HTML avec des boutons permettant de les exécuter

Exemple d'appel : http://localhost:8080/webappwatcher-web/RequestLogFilterCmd/printParameters
